<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--여러 도메인을 위한 쿼리 xml를 작성할 때 도메인을 식별하기 위해 namespace 부여 => sqlSession.쿼리메서드("식별자", 
	paramdata); 식별자 => namespace.id ex)sqlSession.selectOne("homeworkboard.search", 
	paramdata); -->
<mapper namespace="homeworkboard">
	<!-- resultMap column명과 속성명이 다를 경우 매칭 join시 -->
	<resultMap type="homeworkboardfile" id="filemap">
		<!-- primary key 인경우 id 태그로 설정 -->
		<id column="upno" property="upno" />
		<!-- primary key가 아닌 다른 column -->
		<result column="filename" property="rfileName" />
		<result column="sfilename" property="sfileName" />
		<result column="contents" property="contents" />
		<result column="no" property="bno" />
	</resultMap>

	<resultMap type="homeworkboard" id="homeworkmap">
		<id column="no" property="no" />
		<result column="id" property="id" />
		<result column="pw" property="pw" />
		<result column="title" property="title" />
		<result column="regdate" property="regdate" />
		<result column="contents" property="contents" />
		<!-- join data 처리 1 : 1 association tag 1 : N collection tag property 객체에 
			매핑되는 속성명 ofType join에 매핑되는 실제 타입 resultMap join에 매핑되는 resultMap id -->
		<collection property="files" ofType="homeworkboardfile"
			resultMap="filemap" />
	</resultMap>

	<select id="search" parameterType="int" resultMap="homeworkmap">
		select h.no no, pw, id, title, h.contents contents ,regdate, hu.upno fileno, filename, sfilename
		from homeworkupload hu,
		(select no, id, pw, title, contents, to_char(regdate,'yy-mm-dd') regdate
			from homework
			where no = #{no} 
		) h
		where h.no = hu.no(+)
	</select>
	<select id="searchAll" parameterType="pagebean" resultType="homeworkboard">
		select no, id, title, contents, to_char(regdate, 'yyyy-mm-dd') regdate
		from homework
		<where>
			<if test="word != null">
				<choose>
					<when test="key == 'id'">
						id = #{word}
					</when>
					<when test="key == 'title'">
						title like '%'||#{word}||'%'
					</when>
					<when test="key == 'contents'">
						contents like '%'||#{word}||'%'
					</when>
				</choose>
			</if>
		</where>
		order by no desc
	</select>
	<select id="getCount" parameterType="pagebean" resultType="int">
		select count(*) from homework
		<where>
			<if test="word != null">
				<choose>
					<when test="key == 'id'">
						id = #{word}
					</when>
					<when test="key == 'title'">
						title like '%'||#{word}||'%'
					</when>
					<when test="key == 'contents'">
						contents like '%'||#{word}||'%'
					</when>
				</choose>
			</if>
		</where>
	</select>
	<select id="gethomeworkBoardNo" resultType="int">
		select
		homework_no_seq.nextval from dual
	</select>

	<insert id="insert" parameterType="homeworkboard">
		insert into homework(no, id, pw, title, contents, regdate) 
		values(
				#{no:INTEGER}
				, #{id:VARCHAR}
				, #{pw:VARCHAR}
				, #{title:VARCHAR}
				, #{contents:VARCHAR}
				, sysdate
		)
	</insert>
	<insert id="insertFile" parameterType="homeworkboardfile">
		insert into homeworkupload(upno, filename, sfilename, contents, no)
		values(homeworkupload_upno_seq.nextval, #{rfileName:VARCHAR},
		#{sfileName:VARCHAR}, #{contents:VARCHAR}, #{bno:INTEGER})
	</insert>
	<update id="update" parameterType="homeworkboard"> update homework 
		set id=#{id:VARCHAR} , title=#{title:VARCHAR} , contents=#{contents:VARCHAR}, pw=#{pw:VARCHAR} 
		, regdate=sysdate where no=#{no:INTEGER} 
	</update> 
		
	<delete id="delete" parameterType="int"> 
		delete from homework where no=#{no} 
	</delete>
</mapper>












